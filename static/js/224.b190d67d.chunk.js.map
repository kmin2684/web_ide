{"version":3,"file":"static/js/224.b190d67d.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js","../node_modules/@babel/parser/src/util/location.js","../node_modules/@babel/parser/src/parse-error/credentials.js","../node_modules/@babel/parser/src/parse-error/to-node-description.js","../node_modules/@babel/parser/src/parse-error/pipeline-operator-errors.js","../node_modules/@babel/parser/src/parse-error.js","../node_modules/@babel/parser/src/parse-error/module-errors.js","../node_modules/@babel/parser/src/parse-error/standard-errors.js","../node_modules/@babel/parser/src/parse-error/strict-mode-errors.js","../node_modules/@babel/parser/src/plugins/estree.js","../node_modules/@babel/parser/src/tokenizer/context.js","../node_modules/@babel/parser/src/tokenizer/types.js","../node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts","../node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts","../node_modules/@babel/parser/src/util/identifier.js","../node_modules/@babel/parser/src/util/scopeflags.js","../node_modules/@babel/parser/src/parser/comments.js","../node_modules/@babel/parser/src/parser/base.js","../node_modules/@babel/parser/src/util/whitespace.js","../node_modules/@babel/parser/src/tokenizer/state.js","../node_modules/@babel/parser/src/tokenizer/index.js","../node_modules/@babel/parser/src/util/scope.js","../node_modules/@babel/parser/src/plugins/flow/scope.js","../node_modules/@babel/parser/src/util/class-scope.js","../node_modules/@babel/parser/src/util/expression-scope.js","../node_modules/@babel/parser/src/util/production-parameter.js","../node_modules/@babel/parser/src/parser/util.js","../node_modules/@babel/parser/src/parser/node.js","../node_modules/@babel/parser/src/plugins/flow/index.js","../node_modules/@babel/parser/src/plugins/jsx/xhtml.js","../node_modules/@babel/parser/src/plugins/jsx/index.js","../node_modules/@babel/parser/src/plugins/typescript/scope.js","../node_modules/@babel/parser/src/plugins/typescript/index.js","../node_modules/@babel/parser/src/plugins/placeholders.js","../node_modules/@babel/parser/src/plugin-utils.js","../node_modules/@babel/parser/src/plugins/v8intrinsic.js","../node_modules/@babel/parser/src/options.js","../node_modules/@babel/parser/src/parser/lval.js","../node_modules/@babel/parser/src/parser/expression.js","../node_modules/@babel/parser/src/parser/statement.js","../node_modules/@babel/parser/src/parser/index.js","../node_modules/@babel/parser/src/index.js"],"sourcesContent":["function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nmodule.exports = _taggedTemplateLiteral, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// @flow\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","// @flow\n\nexport const ParseErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ParseErrorCode = $Values<typeof ParseErrorCodes>;\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode,\n  reasonCode: string,\n  syntaxPlugin?: SyntaxPlugin,\n\n  toMessage: ToMessage<ErrorDetails>,\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get() {\n    return keys.reduce((object, key) => object[key], this);\n  },\n  set(value) {\n    keys.reduce(\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: () => any,\n  properties: Object,\n  descriptors: Object,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign((new constructor(): T), properties),\n    );\n\nexport { instantiate };\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = $Keys<\n  $Diff<typeof NodeDescriptions, { UpdateExpression: any }>,\n>;\ntype NodeWithDescription =\n  | { type: \"UpdateExpression\", prefix: boolean }\n  | { type: NodeTypesWithDescriptions };\n\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix)]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\nimport toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set<string>([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n]);\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter: _(\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  ),\n  PipeTopicRequiresHackPipes: _(\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  ),\n  PipeTopicUnbound: _(\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  ),\n  PipeTopicUnconfiguredToken: _<{| token: string |}>(\n    ({ token }) =>\n      `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  ),\n  PipeTopicUnused: _(\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  ),\n  PipeUnparenthesizedBody: _<{| type: string |}>(\n    ({ type }) =>\n      `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n        type,\n      })}; please wrap it in parentheses.`,\n  ),\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow: _(\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  ),\n  PipelineBodySequenceExpression: _(\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  ),\n  PipelineHeadSequenceExpression: _(\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  ),\n  PipelineTopicUnused: _(\n    \"Pipeline is in topic style but does not use topic reference.\",\n  ),\n  PrimaryTopicNotAllowed: _(\n    \"Topic reference was used in a lexical context without topic binding.\",\n  ),\n  PrimaryTopicRequiresSmartPipeline: _(\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  ),\n});\n","// @flow\n\nimport { Position } from \"./util/location\";\nimport type { NodeBase } from \"./types\";\nimport {\n  instantiate,\n  type ParseErrorCode,\n  ParseErrorCodes,\n  type ParseErrorCredentials,\n} from \"./parse-error/credentials\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: string;\n\n  missingPlugin?: string | string[];\n\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = ({\n  loc: Position,\n  details: ErrorDetails,\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails: Object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = { loc: Position, details: ErrorDetails };\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate<ParseError<ErrorDetails>>(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(overrides: { loc?: Position, details?: ErrorDetails } = {}) {\n          const loc = overrides.loc || {};\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get() {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    );\n  };\n}\n\n// This part is tricky. You'll probably notice from the name of this function\n// that it is supposed to return `ParseErrorCredentials`, but instead these.\n// declarations seem to instead imply that they return\n// `ParseErrorConstructor<ErrorDetails>` instead. This is because in Flow we\n// can't easily extract parameter types (either from functions, like with\n// Typescript's Parameters<f> utility type, or from generic types either). As\n// such, this function does double duty: packaging up the credentials during\n// its actual runtime operation, but pretending to return the\n// `ParseErrorConstructor<ErrorDetails>` that we won't actually have until later\n// to the type system, avoiding the need to do so with $ObjMap (which doesn't\n// work) in `ParseErrorEnum`. This hack won't be necessary when we switch to\n// Typescript.\ndeclare function toParseErrorCredentials<T: string>(\n  T,\n  ?{ code?: ParseErrorCode, reasonCode?: string } | boolean,\n): ParseErrorConstructor<{||}>;\n\n// ESLint seems to erroneously think that Flow's overloading syntax is an\n// accidental redeclaration of the function:\n// https://github.com/babel/eslint-plugin-babel/issues/162\n// eslint-disable-next-line no-redeclare\ndeclare function toParseErrorCredentials<ErrorDetails>(\n  (ErrorDetails) => string,\n  ?{ code?: ParseErrorCode, reasonCode?: string } | boolean,\n): ParseErrorConstructor<ErrorDetails>;\n\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\nexport function toParseErrorCredentials(toMessageOrMessage, credentials) {\n  return {\n    toMessage:\n      typeof toMessageOrMessage === \"string\"\n        ? () => toMessageOrMessage\n        : toMessageOrMessage,\n    ...credentials,\n  };\n}\n\n// This is the templated form.\ndeclare function ParseErrorEnum(string[]): typeof ParseErrorEnum;\n\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\ndeclare function ParseErrorEnum<T>(\n  toParseErrorCredentials: (typeof toParseErrorCredentials) => T,\n  syntaxPlugin?: string,\n): T;\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either error\n// messages, or `toMessage` functions that define additional necessary `details`\n// needed by the `ParseError`:\n//\n// ParseErrorEnum`optionalSyntaxPlugin` (_ => ({\n//   ErrorWithStaticMessage: _(\"message\"),\n//   ErrorWithDynamicMessage: _<{ type: string }>(({ type }) => `${type}`),\n// });\n//\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\nexport function ParseErrorEnum(argument, syntaxPlugin) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return toParseErrorCredentialsMap =>\n      ParseErrorEnum(toParseErrorCredentialsMap, argument[0]);\n  }\n\n  const partialCredentials = argument(toParseErrorCredentials);\n  const ParseErrorConstructors = {};\n\n  for (const reasonCode of Object.keys(partialCredentials)) {\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCodes.SyntaxError,\n      reasonCode,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...partialCredentials[reasonCode],\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {|\n  ...ErrorDetails,\n  at: Position | NodeBase,\n|};\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","// @flow\n\nimport { ParseErrorCodes, toParseErrorCredentials } from \"../parse-error\";\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  ImportMetaOutsideModule: _(\n    `import.meta may appear only with 'sourceType: \"module\"'`,\n    { code: ParseErrorCodes.SourceTypeModuleError },\n  ),\n  ImportOutsideModule: _(\n    `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    { code: ParseErrorCodes.SourceTypeModuleError },\n  ),\n});\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\nimport toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\", prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"Identfier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\",\n    };\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  AccessorIsGenerator: _<{| kind: \"get\" | \"set\" |}>(\n    ({ kind }) => `A ${kind}ter cannot be a generator.`,\n  ),\n\n  ArgumentsInClass: _(\n    \"'arguments' is only allowed in functions and class methods.\",\n  ),\n  AsyncFunctionInSingleStatementContext: _(\n    \"Async functions can only be declared at the top level or inside a block.\",\n  ),\n  AwaitBindingIdentifier: _(\n    \"Can not use 'await' as identifier inside an async function.\",\n  ),\n  AwaitBindingIdentifierInStaticBlock: _(\n    \"Can not use 'await' as identifier inside a static block.\",\n  ),\n  AwaitExpressionFormalParameter: _(\n    \"'await' is not allowed in async function parameters.\",\n  ),\n  AwaitNotInAsyncContext: _(\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  ),\n  AwaitNotInAsyncFunction: _(\"'await' is only allowed within async functions.\"),\n  BadGetterArity: _(\"A 'get' accesor must not have any formal parameters.\"),\n  BadSetterArity: _(\"A 'set' accesor must have exactly one formal parameter.\"),\n  BadSetterRestParameter: _(\n    \"A 'set' accesor function argument must not be a rest parameter.\",\n  ),\n  ConstructorClassField: _(\"Classes may not have a field named 'constructor'.\"),\n  ConstructorClassPrivateField: _(\n    \"Classes may not have a private field named '#constructor'.\",\n  ),\n  ConstructorIsAccessor: _(\"Class constructor may not be an accessor.\"),\n  ConstructorIsAsync: _(\"Constructor can't be an async function.\"),\n  ConstructorIsGenerator: _(\"Constructor can't be a generator.\"),\n  DeclarationMissingInitializer: _<{| kind: \"const\" | \"destructuring\" |}>(\n    ({ kind }) => `Missing initializer in ${kind} declaration.`,\n  ),\n  DecoratorBeforeExport: _(\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  ),\n  DecoratorConstructor: _(\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  ),\n  DecoratorExportClass: _(\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  ),\n  DecoratorSemicolon: _(\"Decorators must not be followed by a semicolon.\"),\n  DecoratorStaticBlock: _(\"Decorators can't be used with a static block.\"),\n  DeletePrivateField: _(\"Deleting a private field is not allowed.\"),\n  DestructureNamedImport: _(\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  ),\n  DuplicateConstructor: _(\"Duplicate constructor in the same class.\"),\n  DuplicateDefaultExport: _(\"Only one default export allowed per module.\"),\n  DuplicateExport: _<{| exportName: string |}>(\n    ({ exportName }) =>\n      `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  ),\n  DuplicateProto: _(\"Redefinition of __proto__ property.\"),\n  DuplicateRegExpFlags: _(\"Duplicate regular expression flag.\"),\n  ElementAfterRest: _(\"Rest element must be last element.\"),\n  EscapedCharNotAnIdentifier: _(\"Invalid Unicode escape.\"),\n  ExportBindingIsString: _<{| localName: string, exportName: string |}>(\n    ({ localName, exportName }) =>\n      `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ),\n  ExportDefaultFromAsIdentifier: _(\n    \"'from' is not allowed as an identifier after 'export default'.\",\n  ),\n\n  ForInOfLoopInitializer: _<{| type: \"ForInStatement\" | \"ForOfStatement\" |}>(\n    ({ type }) =>\n      `'${\n        type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n      }' loop variable declaration may not have an initializer.`,\n  ),\n\n  ForOfAsync: _(\"The left-hand side of a for-of loop may not be 'async'.\"),\n  ForOfLet: _(\"The left-hand side of a for-of loop may not start with 'let'.\"),\n  GeneratorInSingleStatementContext: _(\n    \"Generators can only be declared at the top level or inside a block.\",\n  ),\n\n  IllegalBreakContinue: _<{| type: \"BreakStatement\" | \"ContinueStatement\" |}>(\n    ({ type }) =>\n      `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n  ),\n\n  IllegalLanguageModeDirective: _(\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  ),\n  IllegalReturn: _(\"'return' outside of function.\"),\n  ImportBindingIsString: _<{| importName: string |}>(\n    ({ importName }) =>\n      `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ),\n  ImportCallArgumentTrailingComma: _(\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ),\n  ImportCallArity: _<{| maxArgumentCount: 1 | 2 |}>(\n    ({ maxArgumentCount }) =>\n      `\\`import()\\` requires exactly ${\n        maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n      }.`,\n  ),\n  ImportCallNotNewExpression: _(\"Cannot use new with import(...).\"),\n  ImportCallSpreadArgument: _(\"`...` is not allowed in `import()`.\"),\n  IncompatibleRegExpUVFlags: _(\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  ),\n  InvalidBigIntLiteral: _(\"Invalid BigIntLiteral.\"),\n  InvalidCodePoint: _(\"Code point out of bounds.\"),\n  InvalidCoverInitializedName: _(\"Invalid shorthand property initializer.\"),\n  InvalidDecimal: _(\"Invalid decimal.\"),\n  InvalidDigit: _<{| radix: number |}>(\n    ({ radix }) => `Expected number in radix ${radix}.`,\n  ),\n  InvalidEscapeSequence: _(\"Bad character escape sequence.\"),\n  InvalidEscapeSequenceTemplate: _(\"Invalid escape sequence in template.\"),\n  InvalidEscapedReservedWord: _<{| reservedWord: string |}>(\n    ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`,\n  ),\n  InvalidIdentifier: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Invalid identifier ${identifierName}.`,\n  ),\n  InvalidLhs: _<{| ancestor: LValAncestor |}>(\n    ({ ancestor }) =>\n      `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  ),\n  InvalidLhsBinding: _<{| ancestor: LValAncestor |}>(\n    ({ ancestor }) =>\n      `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  ),\n  InvalidNumber: _(\"Invalid number.\"),\n  InvalidOrMissingExponent: _(\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  ),\n  InvalidOrUnexpectedToken: _<{| unexpected: string |}>(\n    ({ unexpected }) => `Unexpected character '${unexpected}'.`,\n  ),\n  InvalidParenthesizedAssignment: _(\n    \"Invalid parenthesized assignment pattern.\",\n  ),\n  InvalidPrivateFieldResolution: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Private name #${identifierName} is not defined.`,\n  ),\n  InvalidPropertyBindingPattern: _(\"Binding member expression.\"),\n  InvalidRecordProperty: _(\n    \"Only properties and spread elements are allowed in record definitions.\",\n  ),\n  InvalidRestAssignmentPattern: _(\"Invalid rest operator's argument.\"),\n  LabelRedeclaration: _<{| labelName: string |}>(\n    ({ labelName }) => `Label '${labelName}' is already declared.`,\n  ),\n  LetInLexicalBinding: _(\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  ),\n  LineTerminatorBeforeArrow: _(\"No line break is allowed before '=>'.\"),\n  MalformedRegExpFlags: _(\"Invalid regular expression flag.\"),\n  MissingClassName: _(\"A class name is required.\"),\n  MissingEqInAssignment: _(\n    \"Only '=' operator can be used for specifying default value.\",\n  ),\n  MissingSemicolon: _(\"Missing semicolon.\"),\n  MissingPlugin: _<{| missingPlugin: [string] |}>(\n    ({ missingPlugin }) =>\n      `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n        .map(name => JSON.stringify(name))\n        .join(\", \")}.`,\n  ),\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also), seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: _<{| missingPlugin: string[] |}>(\n    ({ missingPlugin }) =>\n      `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n        .map(name => JSON.stringify(name))\n        .join(\", \")}.`,\n  ),\n  MissingUnicodeEscape: _(\"Expecting Unicode escape sequence \\\\uXXXX.\"),\n  MixingCoalesceWithLogical: _(\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ),\n  ModuleAttributeDifferentFromType: _(\n    \"The only accepted module attribute is `type`.\",\n  ),\n  ModuleAttributeInvalidValue: _(\n    \"Only string literals are allowed as module attribute values.\",\n  ),\n  ModuleAttributesWithDuplicateKeys: _<{| key: string |}>(\n    ({ key }) => `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ),\n  ModuleExportNameHasLoneSurrogate: _<{| surrogateCharCode: number |}>(\n    ({ surrogateCharCode }) =>\n      `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n        16,\n      )}'.`,\n  ),\n  ModuleExportUndefined: _<{| localName: string |}>(\n    ({ localName }) => `Export '${localName}' is not defined.`,\n  ),\n  MultipleDefaultsInSwitch: _(\"Multiple default clauses.\"),\n  NewlineAfterThrow: _(\"Illegal newline after throw.\"),\n  NoCatchOrFinally: _(\"Missing catch or finally clause.\"),\n  NumberIdentifier: _(\"Identifier directly after number.\"),\n  NumericSeparatorInEscapeSequence: _(\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ),\n  ObsoleteAwaitStar: _(\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  ),\n  OptionalChainingNoNew: _(\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  ),\n  OptionalChainingNoTemplate: _(\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  ),\n  OverrideOnConstructor: _(\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ),\n  ParamDupe: _(\"Argument name clash.\"),\n  PatternHasAccessor: _(\"Object pattern can't contain getter or setter.\"),\n  PatternHasMethod: _(\"Object pattern can't contain methods.\"),\n  PrivateInExpectedIn: _<{| identifierName: string |}>(\n    ({ identifierName }) =>\n      `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  ),\n  PrivateNameRedeclaration: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Duplicate private name #${identifierName}.`,\n  ),\n  RecordExpressionBarIncorrectEndSyntaxType: _(\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  RecordExpressionBarIncorrectStartSyntaxType: _(\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  RecordExpressionHashIncorrectStartSyntaxType: _(\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  ),\n  RecordNoProto: _(\"'__proto__' is not allowed in Record expressions.\"),\n  RestTrailingComma: _(\"Unexpected trailing comma after rest element.\"),\n  SloppyFunction: _(\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  ),\n  StaticPrototype: _(\"Classes may not have static property named prototype.\"),\n  SuperNotAllowed: _(\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  ),\n  SuperPrivateField: _(\"Private fields can't be accessed on super.\"),\n  TrailingDecorator: _(\"Decorators must be attached to a class element.\"),\n  TupleExpressionBarIncorrectEndSyntaxType: _(\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  TupleExpressionBarIncorrectStartSyntaxType: _(\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  TupleExpressionHashIncorrectStartSyntaxType: _(\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  ),\n  UnexpectedArgumentPlaceholder: _(\"Unexpected argument placeholder.\"),\n  UnexpectedAwaitAfterPipelineBody: _(\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  ),\n  UnexpectedDigitAfterHash: _(\"Unexpected digit after hash token.\"),\n  UnexpectedImportExport: _(\n    \"'import' and 'export' may only appear at the top level.\",\n  ),\n  UnexpectedKeyword: _<{| keyword: string |}>(\n    ({ keyword }) => `Unexpected keyword '${keyword}'.`,\n  ),\n  UnexpectedLeadingDecorator: _(\n    \"Leading decorators must be attached to a class declaration.\",\n  ),\n  UnexpectedLexicalDeclaration: _(\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  ),\n  UnexpectedNewTarget: _(\n    \"`new.target` can only be used in functions or class properties.\",\n  ),\n  UnexpectedNumericSeparator: _(\n    \"A numeric separator is only allowed between two digits.\",\n  ),\n  UnexpectedPrivateField: _(\"Unexpected private name.\"),\n  UnexpectedReservedWord: _<{| reservedWord: string |}>(\n    ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`,\n  ),\n  UnexpectedSuper: _(\"'super' is only allowed in object methods and classes.\"),\n  UnexpectedToken: _<{|\n    expected?: ?string,\n    unexpected?: ?string,\n  |}>(\n    ({ expected, unexpected }) =>\n      `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n        expected ? `, expected \"${expected}\"` : \"\"\n      }`,\n  ),\n  UnexpectedTokenUnaryExponentiation: _(\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  ),\n  UnsupportedBind: _(\"Binding should be performed on object property.\"),\n  UnsupportedDecoratorExport: _(\n    \"A decorated export must export a class declaration.\",\n  ),\n  UnsupportedDefaultExport: _(\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  ),\n  UnsupportedImport: _(\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  ),\n  UnsupportedMetaProperty: _<{|\n    target: string,\n    onlyValidPropertyName: string,\n  |}>(\n    ({ target, onlyValidPropertyName }) =>\n      `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  ),\n  UnsupportedParameterDecorator: _(\n    \"Decorators cannot be used to decorate parameters.\",\n  ),\n  UnsupportedPropertyDecorator: _(\n    \"Decorators cannot be used to decorate object literal properties.\",\n  ),\n  UnsupportedSuper: _(\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  ),\n  UnterminatedComment: _(\"Unterminated comment.\"),\n  UnterminatedRegExp: _(\"Unterminated regular expression.\"),\n  UnterminatedString: _(\"Unterminated string constant.\"),\n  UnterminatedTemplate: _(\"Unterminated template.\"),\n  VarRedeclaration: _<{| identifierName: string |}>(\n    ({ identifierName }) =>\n      `Identifier '${identifierName}' has already been declared.`,\n  ),\n  YieldBindingIdentifier: _(\n    \"Can not use 'yield' as identifier inside a generator.\",\n  ),\n  YieldInParameter: _(\"Yield expression is not allowed in formal parameters.\"),\n  ZeroDigitNumericSeparator: _(\n    \"Numeric separator can not be used after leading 0.\",\n  ),\n});\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  StrictDelete: _(\"Deleting local variable in strict mode.\"),\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: _<{| referenceName: string |}>(\n    ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`,\n  ),\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: _<{| bindingName: string |}>(\n    ({ bindingName }) => `Binding '${bindingName}' in strict mode.`,\n  ),\n\n  StrictFunction: _(\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  ),\n  StrictNumericEscape: _(\n    \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  ),\n  StrictOctalLiteral: _(\n    \"Legacy octal literals are not allowed in strict mode.\",\n  ),\n  StrictWith: _(\"'with' in strict mode.\"),\n});\n","// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object, key) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"Property\" ? \"value\" : super.isValidLVal(type, ...rest);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(...arguments);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, start: number, startLoc: Position) {\n      super.resetStartLocation(node, start, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc?: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// @flow\n\n// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Node, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    return this.plugins.get(plugin)?.[name];\n  }\n}\n\nexport type PluginConfig = string | [string, { [string]: any }];\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport { Errors, type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser from \"../parser/comments\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: ch => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: ch => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: ch => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: ch =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simplified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // $FlowIgnore\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const isAllowedSibling =\n      radix === 16\n        ? isAllowedNumericSeparatorSibling.hex\n        : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n        ? isAllowedNumericSeparatorSibling.oct\n        : isAllowedNumericSeparatorSibling.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (!allowNumSeparator) {\n          this.raise(Errors.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition(),\n          });\n        } else if (\n          Number.isNaN(next) ||\n          !isAllowedSibling(next) ||\n          forbiddenSiblings.has(prev) ||\n          forbiddenSiblings.has(next)\n        ) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(Errors.InvalidDigit, {\n            at: this.state.curPosition(),\n            radix,\n          });\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidCodePoint, { at: this.state.curPosition() });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    ++this.state.pos; // eat '`' or `}`\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === charCodes.graveAccent) {\n        ++this.state.pos; // eat '`'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateTail, containsInvalid ? null : out);\n        return;\n      }\n      if (\n        ch === charCodes.dollarSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.leftCurlyBrace\n      ) {\n        this.state.pos += 2; // eat '${'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateNonTail, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n            // We immediately follow a \"\\\\\", and we're an 8 or a 9, so we must\n            // be on the same line.\n            at: createPositionWithColumnOffset(this.state.curPosition(), -1),\n          });\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          // We immediately follow a \"\\\\\", and we're something between 0 and 7,\n          // so we must be on the same line.\n          const codePos = createPositionWithColumnOffset(\n            this.state.curPosition(),\n            -1,\n          );\n          const match = this.input\n            .slice(this.state.pos - 1, this.state.pos + 2)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n                at: codePos,\n              });\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(Errors.InvalidEscapeSequence, { at: codeLoc });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | empty {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: string, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: string[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n}\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","// @flow\n\nimport { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport Tokenizer from \"../tokenizer\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\n\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{||}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{||}>,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: ([ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    { at: node }: { at: Node },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {ParseErrorConstructor<{||}>} error\n   * @param {Node} payload.at\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordArrowParemeterBindingError(\n    error: ParseErrorConstructor<{||}>,\n    { at: node }: { at: Node },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(\n    node: Node,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: ?Position): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParseError<any>),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: ?Position = null;\n  doubleProtoLoc: ?Position = null;\n  privateKeyLoc: ?Position = null;\n  optionalParametersLoc: ?Position = null;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`(_ => ({\n  AmbiguousConditionalArrow: _(\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  ),\n  AmbiguousDeclareModuleKind: _(\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  ),\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: _<{| reservedType: string |}>(\n    ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`,\n  ),\n  DeclareClassElement: _(\n    \"The `declare` modifier can only appear on class fields.\",\n  ),\n  DeclareClassFieldInitializer: _(\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  ),\n  DuplicateDeclareModuleExports: _(\n    \"Duplicate `declare module.exports` statement.\",\n  ),\n  EnumBooleanMemberNotInitialized: _<{|\n    memberName: string,\n    enumName: string,\n  |}>(\n    ({ memberName, enumName }) =>\n      `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumDuplicateMemberName: _<{| memberName: string, enumName: string |}>(\n    ({ memberName, enumName }) =>\n      `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  ),\n  EnumInconsistentMemberValues: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  ),\n  EnumInvalidExplicitType: _<{| invalidEnumType: string, enumName: string |}>(\n    ({ invalidEnumType, enumName }) =>\n      `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidExplicitTypeUnknownSupplied: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  ),\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName, explicitType }) =>\n      // $FlowIgnore (coercing null which never actually happens)\n      `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  ),\n  EnumInvalidMemberInitializerSymbolType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName }) =>\n      `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidMemberInitializerUnknownType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName }) =>\n      `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidMemberName: _<{|\n    enumName: string,\n    memberName: string,\n    suggestion: string,\n  |}>(\n    ({ enumName, memberName, suggestion }) =>\n      `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  ),\n  EnumNumberMemberNotInitialized: _<{|\n    enumName: string,\n    memberName: string,\n  |}>(\n    ({ enumName, memberName }) =>\n      `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumStringMemberInconsistentlyInitailized: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  ),\n  GetterMayNotHaveThisParam: _(\"A getter cannot have a `this` parameter.\"),\n  ImportTypeShorthandOnlyInPureImport: _(\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  ),\n  InexactInsideExact: _(\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  ),\n  InexactInsideNonObject: _(\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  ),\n  InexactVariance: _(\"Explicit inexact syntax cannot have variance.\"),\n  InvalidNonTypeImportInDeclareModule: _(\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  ),\n  MissingTypeParamDefault: _(\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  ),\n  NestedDeclareModule: _(\n    \"`declare module` cannot be used inside another `declare module`.\",\n  ),\n  NestedFlowComment: _(\n    \"Cannot have a flow comment inside another flow comment.\",\n  ),\n  PatternIsOptional: _(\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    !process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {},\n  ),\n  SetterMayNotHaveThisParam: _(\"A setter cannot have a `this` parameter.\"),\n  SpreadVariance: _(\"Spread properties cannot have variance.\"),\n  ThisParamAnnotationRequired: _(\n    \"A type annotation is required for the `this` parameter.\",\n  ),\n  ThisParamBannedInConstructor: _(\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ),\n  ThisParamMayNotBeOptional: _(\"The `this` parameter cannot be optional.\"),\n  ThisParamMustBeFirst: _(\n    \"The `this` parameter must be the first function parameter.\",\n  ),\n  ThisParamNoDefault: _(\"The `this` parameter may not have a default value.\"),\n  TypeBeforeInitializer: _(\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  ),\n  TypeCastInPattern: _(\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  ),\n  UnexpectedExplicitInexactInObject: _(\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  ),\n  UnexpectedReservedType: _<{| reservedType: string |}>(\n    ({ reservedType }) => `Unexpected reserved type ${reservedType}.`,\n  ),\n  UnexpectedReservedUnderscore: _(\n    \"`_` is only allowed as a type argument to call or new.\",\n  ),\n  UnexpectedSpaceBetweenModuloChecks: _(\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  ),\n  UnexpectedSpreadType: _(\n    \"Spread operator cannot appear in class or interface definitions.\",\n  ),\n  UnexpectedSubtractionOperand: _(\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  ),\n  UnexpectedTokenAfterTypeParameter: _(\n    \"Expected an arrow function after this type parameter declaration.\",\n  ),\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: _(\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  ),\n  UnsupportedDeclareExportKind: _<{|\n    unsupportedExportKind: string,\n    suggestion: string,\n  |}>(\n    ({ unsupportedExportKind, suggestion }) =>\n      `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  ),\n  UnsupportedStatementInDeclareModule: _(\n    \"Only declares and type imports are allowed inside declare module.\",\n  ),\n  UnterminatedFlowComment: _(\"Unterminated flow-comment.\"),\n}));\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", loc: Position, value: N.Node |}\n  | {| type: \"string\", loc: Position, value: N.Node |}\n  | {| type: \"boolean\", loc: Position, value: N.Node |}\n  | {| type: \"invalid\", loc: Position |}\n  | {| type: \"none\", loc: Position |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: ?Position = null;\n        let inexactStartLoc: ?Position = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStartLoc: ?Position,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(...arguments);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc?: ?Position,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"TypeCastExpression\" || super.isValidLVal(type, ...rest);\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.loc.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: N.Node, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string, __proto__: null } = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`(_ => ({\n  AttributeIsEmpty: _(\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  ),\n  MissingClosingTagElement: _<{| openingTagName: string |}>(\n    ({ openingTagName }) =>\n      `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  ),\n  MissingClosingTagFragment: _(\n    \"Expected corresponding JSX closing tag for <>.\",\n  ),\n  UnexpectedSequenceExpression: _(\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  ),\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: _<{| unexpected: string, HTMLEntity: string |}>(\n    ({ unexpected, HTMLEntity }) =>\n      `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  ),\n  UnsupportedJsxValue: _(\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  ),\n  UnterminatedJsxContent: _(\"Unterminated JSX contents.\"),\n  UnwrappedAdjacentJSXElements: _(\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  ),\n}));\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            // $FlowIgnore\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              // $FlowIgnore\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n  tokenIsBinaryOperator,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { Position, createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_NONE,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst getOwn = (object, key) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nfunction tsTokenCanStartExpression(token: TokenType) {\n  // tsc considers binary operators as \"can start expression\" tokens:\n  // https://github.com/microsoft/TypeScript/blob/eca1b4/src/compiler/parser.ts#L4260-L4266\n  return tokenCanStartExpression(token) || tokenIsBinaryOperator(token);\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`(_ => ({\n  AbstractMethodHasImplementation: _<{| methodName: string |}>(\n    ({ methodName }) =>\n      `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  ),\n  AbstractPropertyHasInitializer: _<{| propertyName: string |}>(\n    ({ propertyName }) =>\n      `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  ),\n  AccesorCannotDeclareThisParameter: _(\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  ),\n  AccesorCannotHaveTypeParameters: _(\n    \"An accessor cannot have type parameters.\",\n  ),\n  CannotFindName: _<{| name: string |}>(\n    ({ name }) => `Cannot find name '${name}'.`,\n  ),\n  ClassMethodHasDeclare: _(\"Class methods cannot have the 'declare' modifier.\"),\n  ClassMethodHasReadonly: _(\n    \"Class methods cannot have the 'readonly' modifier.\",\n  ),\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: _(\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ),\n  ConstructorHasTypeParameters: _(\n    \"Type parameters cannot appear on a constructor declaration.\",\n  ),\n  DeclareAccessor: _<{| kind: \"get\" | \"set\" |}>(\n    ({ kind }) => `'declare' is not allowed in ${kind}ters.`,\n  ),\n  DeclareClassFieldHasInitializer: _(\n    \"Initializers are not allowed in ambient contexts.\",\n  ),\n  DeclareFunctionHasImplementation: _(\n    \"An implementation cannot be declared in ambient contexts.\",\n  ),\n  DuplicateAccessibilityModifier: _<{| modifier: N.Accessibility |}>(\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line no-unused-vars\n    ({ modifier }) => `Accessibility modifier already seen.`,\n  ),\n  DuplicateModifier: _<{| modifier: TsModifier |}>(\n    ({ modifier }) => `Duplicate modifier: '${modifier}'.`,\n  ),\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: _<{| token: \"extends\" | \"implements\" |}>(\n    ({ token }) => `'${token}' list cannot be empty.`,\n  ),\n  EmptyTypeArguments: _(\"Type argument list cannot be empty.\"),\n  EmptyTypeParameters: _(\"Type parameter list cannot be empty.\"),\n  ExpectedAmbientAfterExportDeclare: _(\n    \"'export declare' must be followed by an ambient declaration.\",\n  ),\n  ImportAliasHasImportType: _(\"An import alias can not use 'import type'.\"),\n  IncompatibleModifiers: _<{| modifiers: [TsModifier, TsModifier] |}>(\n    ({ modifiers }) =>\n      `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  ),\n  IndexSignatureHasAbstract: _(\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  ),\n  IndexSignatureHasAccessibility: _<{| modifier: N.Accessibility |}>(\n    ({ modifier }) =>\n      `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  ),\n  IndexSignatureHasDeclare: _(\n    \"Index signatures cannot have the 'declare' modifier.\",\n  ),\n  IndexSignatureHasOverride: _(\n    \"'override' modifier cannot appear on an index signature.\",\n  ),\n  IndexSignatureHasStatic: _(\n    \"Index signatures cannot have the 'static' modifier.\",\n  ),\n  InitializerNotAllowedInAmbientContext: _(\n    \"Initializers are not allowed in ambient contexts.\",\n  ),\n  InvalidModifierOnTypeMember: _<{| modifier: TsModifier |}>(\n    ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`,\n  ),\n  InvalidModifierOnTypeParameter: _<{| modifier: TsModifier |}>(\n    ({ modifier }) =>\n      `'${modifier}' modifier cannot appear on a type parameter.`,\n  ),\n  InvalidModifierOnTypeParameterPositions: _<{| modifier: TsModifier |}>(\n    ({ modifier }) =>\n      `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  ),\n  InvalidModifiersOrder: _<{| orderedModifiers: [TsModifier, TsModifier] |}>(\n    ({ orderedModifiers }) =>\n      `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  ),\n  InvalidTupleMemberLabel: _(\n    \"Tuple members must be labeled with a simple identifier.\",\n  ),\n  MissingInterfaceName: _(\n    \"'interface' declarations must be followed by an identifier.\",\n  ),\n  MixedLabeledAndUnlabeledElements: _(\n    \"Tuple members must all have names or all not have names.\",\n  ),\n  NonAbstractClassHasAbstractMethod: _(\n    \"Abstract methods can only appear within an abstract class.\",\n  ),\n  NonClassMethodPropertyHasAbstractModifer: _(\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  ),\n  OptionalTypeBeforeRequired: _(\n    \"A required element cannot follow an optional element.\",\n  ),\n  OverrideNotInSubClass: _(\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  ),\n  PatternIsOptional: _(\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  ),\n  PrivateElementHasAbstract: _(\n    \"Private elements cannot have the 'abstract' modifier.\",\n  ),\n  PrivateElementHasAccessibility: _<{| modifier: N.Accessibility |}>(\n    ({ modifier }) =>\n      `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ),\n  ReadonlyForMethodSignature: _(\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ),\n  ReservedArrowTypeParam: _(\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ),\n  ReservedTypeAssertion: _(\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  ),\n  SetAccesorCannotHaveOptionalParameter: _(\n    \"A 'set' accessor cannot have an optional parameter.\",\n  ),\n  SetAccesorCannotHaveRestParameter: _(\n    \"A 'set' accessor cannot have rest parameter.\",\n  ),\n  SetAccesorCannotHaveReturnType: _(\n    \"A 'set' accessor cannot have a return type annotation.\",\n  ),\n  SingleTypeParameterWithoutTrailingComma: _<{| typeParameterName: string |}>(\n    ({ typeParameterName }) =>\n      `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  ),\n  StaticBlockCannotHaveModifier: _(\n    \"Static class blocks cannot have any modifier.\",\n  ),\n  TypeAnnotationAfterAssign: _(\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  ),\n  TypeImportCannotSpecifyDefaultAndNamed: _(\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  ),\n  TypeModifierIsUsedInTypeExports: _(\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  ),\n  TypeModifierIsUsedInTypeImports: _(\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  ),\n  UnexpectedParameterModifier: _(\n    \"A parameter property is only allowed in a constructor implementation.\",\n  ),\n  UnexpectedReadonly: _(\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  ),\n  UnexpectedTypeAnnotation: _(\"Did not expect a type annotation here.\"),\n  UnexpectedTypeCastInParameter: _(\n    \"Unexpected type cast in parameter position.\",\n  ),\n  UnsupportedImportTypeArgument: _(\n    \"Argument in a type import must be a string literal.\",\n  ),\n  UnsupportedParameterPropertyKind: _(\n    \"A parameter property may not be declared using a binding pattern.\",\n  ),\n  UnsupportedSignatureParameterKind: _<{| type: string |}>(\n    ({ type }) =>\n      `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n  ),\n}));\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(modifier: string): boolean %checks {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!tokenIsIdentifier(this.state.type) && this.state.type !== tt._in) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n    }: {\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      stopOnStartOfClassStaticBlock?: boolean,\n      // FIXME: make sure errorTemplate can receive `modifier`\n      errorTemplate?: any,\n    }): void {\n      const enforceOrder = (loc, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (loc, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): ?(T[]) {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"in\", \"out\"],\n        disallowedModifiers: [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"readonly\",\n          \"declare\",\n          \"abstract\",\n          \"override\",\n        ],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n      });\n    }\n\n    // for better error recover\n    tsParseNoneModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [],\n        disallowedModifiers: [\"in\", \"out\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n    }\n\n    tsParseTypeParameter(\n      parseModifiers: (\n        node: N.TsTypeParameter,\n      ) => void = this.tsParseNoneModifiers.bind(this),\n    ): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: ?(node: N.TsTypeParameter) => void,\n    ): ?N.TsTypeParameterDeclaration {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: ?(node: N.TsTypeParameter) => void) {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type !== tt._const) return null;\n\n      this.next();\n      const typeReference = this.tsParseTypeReference();\n\n      // If the type reference has type parameters, then you are using it as a\n      // type and not as a const signifier. We'll *never* be able to find this\n      // name, since const isn't allowed as a type name. So in this instance we\n      // get to pretend we're the type checker.\n      if (typeReference.typeParameters) {\n        this.raise(TSErrors.CannotFindName, {\n          at: typeReference.typeName,\n          name: \"const\",\n        });\n      }\n\n      return typeReference;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node: N.TsKeywordType = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node: N.TsExpressionWithTypeArguments = this.startNode();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n      properties: { declare?: true } = {},\n    ): ?N.TsInterfaceDeclaration {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers.bind(this),\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      properties: { const?: true, declare?: true } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return this.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) throw this.unexpected();\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            throw this.unexpected();\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = this.parseTaggedTemplateExpression(\n              base,\n              startPos,\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // $FlowIgnore (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              // $FlowIgnore\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          // TODO: This doesn't exactly match what TS does when it comes to ASI.\n          // For example,\n          //   a<b>\n          //   if (0);\n          // is not valid TS code (https://github.com/microsoft/TypeScript/issues/48654)\n          // However, it should correctly parse anything that is correctly parsed by TS.\n          if (\n            tsTokenCanStartExpression(this.state.type) &&\n            this.state.type !== tt.parenL\n          ) {\n            // Bail out. We have something like a<b>c, which is not an expression with\n            // type arguments but an (a < b) > c comparison.\n            throw this.unexpected();\n          }\n\n          const node: N.TsInstantiationExpression = this.startNodeAt(\n            startPos,\n            startLoc,\n          );\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        //\n        // If a const declaration has no type annotation and is initiailized to\n        // a string literal, numeric literal, or enum reference, then it is\n        // allowed. In an ideal world, we'd check whether init was *actually* an\n        // enum reference, but we allow anything that \"could be\" a literal enum\n        // in `isPossiblyLiteralEnum` since we don't have all the information\n        // that the typescript compiler has.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          init.type !== \"StringLiteral\" &&\n          init.type !== \"BooleanLiteral\" &&\n          init.type !== \"NumericLiteral\" &&\n          init.type !== \"BigIntLiteral\" &&\n          (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) &&\n          !isPossiblyLiteralEnum(init)\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node: N.TsEnumDeclaration = this.startNode();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(this.startNode());\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        disallowedModifiers: [\"in\", \"out\"],\n        stopOnStartOfClassStaticBlock: true,\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member: any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member: any).accessibility,\n          });\n        }\n        if ((member: any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member: any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: ?N.Declaration =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // $FlowIgnore\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: ?N.TsTypeParameterDeclaration;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n                at: createPositionWithColumnOffset(parameter.loc.end, 1),\n                typeParameterName: parameter.name.name,\n              });\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParemeterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(exprList: N.Expression[]): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | ?N.TsInterfaceDeclaration {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(node[rightOfAsKey], BIND_LEXICAL);\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`(_ => ({\n  ClassNameIsRequired: _(\"A class name is required.\"),\n  UnexpectedSpace: _(\"Unexpected space in placeholder.\"),\n}));\n/* eslint-disable sort-keys */\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"Placeholder\" || super.isValidLVal(type, ...rest);\n    }\n\n    toAssignable(node: N.Node): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(...arguments);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\nimport type { PluginConfig } from \"./parser/base\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = $ReadOnlyArray<PluginConfig>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startColumn: number,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: ObjectOrClassMember, */\n  /*:: ClassMember, */\n  ObjectMember,\n  /*:: TsNamedTypeElementBase, */\n  /*:: PrivateName, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\n\nconst getOwn = (object, key) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  +parseObjPropValue: (\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => void;\n  +parsePropertyName: (\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ) => Expression | Identifier;\n  +parsePrivateName: () => PrivateName\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression.\n   *                                If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *                                If isLHS is `false`, we are in an arrow function parameters list.\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParemeterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParemeterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc?: ?Position,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(prop: RestElement): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(): ObjectMember | RestElement {\n    const prop = this.startNode();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n\n    return prop;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param {NodeType} type A Node `type` string\n   * @param {boolean} isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param {BindingTypes} binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns { boolean | string | [string, boolean] }\n   *          `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line no-unused-vars\n    binding: BindingTypes,\n  ) {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param {Expression} expression The expression in question to check.\n   * @param {Object} options A set of options described below.\n   * @param {LValAncestor} options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param {BindingTypes} [options.binding=BIND_NONE]\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param {Set<string>|false} [options.checkClashes=false]\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param {boolean} [options.allowingSloppyLetBinding]\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param {boolean} [options.strictModeChanged=false]\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param {boolean} [options.hasParenthesizedAncestor=false]\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   * @memberof LValParser\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor,\n      binding?: BindingTypes,\n      checkClashes?: Set<string> | false,\n      strictModeChanged?: boolean,\n      allowingSloppyLetBinding?: boolean,\n      hasParenthesizedAncestor?: boolean,\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // Flow has difficulty tracking `key` and `expression`, but only if we use\n    // null-proto objects. If we use normal objects, everything works fine.\n    // $FlowIgnore\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\ndeclare var invariant;\n*/\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: ?boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, {\n        in: this.finishNode(node, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(startPos, startLoc, val);\n  }\n\n  wrapParenthesis(\n    startPos: number,\n    startLoc: Position,\n    expression: N.Expression,\n  ): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        expression,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = expression;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.NewExpression): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(node: N.NewExpression): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      elem,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return elem;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop: $FlowFixMe).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaLoc: ?Position,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaLoc: ?Position,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params;\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // $FlowIgnore\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // $FlowIgnore\n                !!node.key\n                  ? node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" };\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      { at: node },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      { at: node },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line no-unused-vars\n    prop: N.ObjectOrClassMember | N.ClassMember,\n  ): void {}\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startPos, startLoc, expr);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: ?Position,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassProperty> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateProperty> = member;\n    const accessorProp: $FlowSubtype<N.ClassAccessorProperty> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = (prop.key: N.Expression);\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier(specifier: N.Node, type: string) {\n    this.checkLVal(specifier.local, {\n      in: specifier,\n      binding: BIND_LEXICAL,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: any,\n    importedIsString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: imported.value,\n        });\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["module","exports","strings","raw","slice","Object","freeze","defineProperties","value","__esModule","Position","constructor","line","col","index","column","this","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCodes","SyntaxError","SourceTypeModuleError","reflect","keys","last","length","get","reduce","object","key","set","item","i","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","UnparenthesizedPipeBodyDescriptions","Set","toParseErrorConstructor","_ref","toMessage","properties","_objectWithoutPropertiesLoose","loc","details","descriptors","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","instantiate","clone","overrides","message","pos","missingPlugin","toParseErrorCredentials","toMessageOrMessage","credentials","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","toParseErrorCredentialsMap","partialCredentials","ParseErrorConstructors","reasonCode","code","Errors","_","ImportMetaOutsideModule","ImportOutsideModule","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toUnenumerable","toESTreeLocation","node","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","template","beforeExpr","startsExpr","isLoop","isAssign","ExportedTokenType","label","conf","rightAssociative","postfix","binop","updateContext","keywords","Map","createKeyword","options","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","push","_options$binop","createKeywordLike","_options$binop2","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","at","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","bigint","decimal","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenCanStartExpression","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsKeyword","tokenLabelName","tokenOperatorPrecedence","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","RegExp","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","reservedWordLikeSet","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","SCOPE_PROGRAM","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_TS_AMBIENT","BIND_NONE","setTrailingComments","comments","undefined","trailingComments","unshift","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","state","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","trailingNode","containingNode","finalizeComment","splice","leadingComments","setLeadingComments","commentStart","input","charCodeAt","arguments","params","specifiers","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","getPluginOption","plugin","lineBreak","lineBreakG","source","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","strict","curLine","lineStart","startLoc","endLoc","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokEndLoc","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","Token","Tokenizer","isLookahead","tokens","pushToken","next","checkKeywordEscapes","nextToken","eat","match","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","raise","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","spaceStart","loop","attachComment","CommentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","next2","readTemplateToken","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","inClass","content","mods","char","includes","pattern","flags","readInt","len","forceLen","allowNumSeparator","forbiddenSiblings","isAllowedSibling","invalid","total","e","Infinity","_isDigit","errorRecovery","prev","Number","isNaN","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","readHexChar","quote","out","chunkStart","readEscapedChar","readTemplateContinuation","containsInvalid","inTemplate","codePos","octalStr","octal","codeLoc","n","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","currentVarScopeFlags","currentThisScopeFlags","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","id","topLevelScope","FlowScope","args","declareFunctions","FlowScopeHandler","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","current","oldClassScope","from","declarePrivateName","elementType","redefined","CLASS_ELEMENT_KIND_GETTER","accessor","usePrivateName","classScope","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParemeterBindingError","recordAsyncArrowParametersError","validateAsPattern","newExpressionScope","ProductionParameterHandler","stacks","currentFlags","functionFlags","isAsync","isGenerator","UtilParser","addExtra","extra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","refExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","isLiteralPropertyName","isPrivateName","getPrivateNameSV","hasPropertyAsPrivateName","property","isOptionalChain","isObjectProperty","isObjectMethod","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","clonePlaceholder","__clone","newNode","NodeUtils","startNode","startNodeAt","startNodeAtNode","finishNode","finishNodeAt","resetStartLocation","resetEndLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","FLOW_PRAGMA_REGEX","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","Error","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","assert","x","tsTokenCanStartExpression","tokenIsBinaryOperator","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","CannotFindName","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","tsIsAccessModifier","tsIsVarianceAnnotations","isPossiblyLiteralEnum","expression","computed","expressions","isUncomputedMemberExpressionChain","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","mixinPlugins","estree","superClass","parse","file","parseRegExpLiteral","regex","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","parseDecimalLiteral","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","expressionValue","initFunction","checkDeclaration","getObjectOrClassMethodParams","method","isValidDirective","parenthesized","parseBlockBody","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parsePrivateName","convertPrivateNameToPrivateIdentifier","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","isValidLVal","rest","isAssignable","isBinding","toAssignable","isLHS","toAssignableObjectExpressionProp","finishCallExpression","optional","callee","attributes","toReferencedArguments","parseExport","exported","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","jsx","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","parseExprAtom","jsxParseEmptyExpression","jsxParseSpreadChild","parseExpression","previousContext","jsxParseAttribute","parseMaybeAssignAllowIn","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","flow","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","BIND_KIND_VALUE","bodyNode","parseImport","hasModuleExport","bodyElement","declaration","isEsModuleType","default","isLet","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","endDelim","exact","callProperties","indexers","internalSlots","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","tryParseConditionalConsequent","consequent","failed","getArrowLikeExpressions","valid","alternate","parseMaybeAssign","disallowInvalid","arrows","finishArrowValidation","list","list1","list2","partition","every","toAssignableList","_node$extra","trailingCommaLoc","SCOPE_FUNCTION","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","isIteratorStart","left","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","currentContext","abort","arrowExpression","_arrowExpression$extr","maybeUnwrapTypeCastExpression","async","_jsx2","parseArrow","shouldParseArrow","setArrowFunctionParameters","checkParams","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","boolsLen","numsLen","strsLen","defaultedLen","afterNext","typescript","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","errorTemplate","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","nonNull","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseInOutModifiers","tsParseNoneModifiers","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","typeReference","tsFillSignature","returnToken","signature","returnTokenRequired","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","createIdentifier","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","keywordTypeFromName","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","_unused2","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","BIND_TS_ENUM","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","_callee$extra","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","_jsx","reportReservedArrowTypeParam","_typeCast","trailingComma","toAssignableParenthesizedExpression","checkToRestConversion","allowPattern","isUnparenthesizedInAssign","binding","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSTypeAssertion","getOwn","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","rightOfAs","leftOfAsKey","rightOfAsKey","leftOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","v8intrinsic","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","placeholders","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","unwrapParenthesizedExpression","LValParser","isLast","_node$extra2","_node$extra3","arg","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","_left","ObjectProperty","checkLVal","in","checkClashes","strictModeChanged","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","isParenthesizedExpression","nextAncestor","child","ParseErrorClass","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","_resultError$loc","ownExpressionErrors","hasYield","parseYield","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","hasIn","op","prec","checkPipelineAtInfixOperator","logical","coalesce","hasAwait","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","_body$extra","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","lookaheadCh","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","tokenType","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","allowSuper","meta","parseMetaProperty","spreadStartLoc","optionalCommaStartLoc","innerStartPos","innerStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","inNonArrowFunction","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","canBeReservedWord","inStaticBlock","inClassAndNotInNonArrowFunction","isKeyword","inFunction","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","ret","revertScopes","parseProgram","loopLabel","switchLabel","loneSurrogate","keywordRelationalOperator","StatementParser","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","babel7CompatTokens","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","parseForIn","startsWithAsync","isForOf","declarationPosition","hasReturn","discriminant","cur","sawDefault","cases","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","statement","isHangingStatement","requireId","treatFunctionsAsVar","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_member$decorators","parseClassAccessorProperty","CLASS_ELEMENT_KIND_SETTER","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasDeclaration","hasSpecifiers","maybeParseExportNamedSpecifiers","maybeParseExportDeclaration","isTypeExport","assertions","FUNC_STATEMENT","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkNames","isDefault","isFrom","_declaration$extra","nodes","surrogate","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","opts","getOptions","pluginMap","pluginsMap","tokTypes","internalTokenTypes","generateExportedTokenTypes","getParser","decoratorsBeforeExport","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","missingPlugins","validatePlugins","pluginsFromOptions","pluginList","parserClassCache","getParserClass","ast","moduleError"],"sourceRoot":""}